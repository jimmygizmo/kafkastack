
I very strongly urge all Python developers to always use Pyenv to manage Python intallations
and Python virtual environments. I have found it to be far better than any other method in
general and in fact the only way to consistently match versions correctly for any serious
Python developer who works on a lot of projects, each of which matches different versions.
Pyenv turns a difficult situation into a joy and you will always have exactly the python
version and the exact set of module version to match every code base you work with. Best of
all, it is effortless and even automatic to switch the version and environment.
In nearly all of my projects, I use a .python-version file and I prefix all of my virtual
environment names with "ve.", so the virtual environment for this project is named:
ve.kafkapoc

By the way "POC" stands for "Proof of Concept" which is usually a simple experiment of demo
that proves all the essential components of a given theory or concept are at their basic level,
all proven to work together and the concept can therefore proceed in evolution and application.

-------------
INSTRUCTIONS:
-------------


My latest Python 3 (thanks to Pyenv) is currently 3.11.1 and I create the Pyenv Virtualenv
virtual environment as follows:

--------

➜  kafkapoc git:(main) ✗ pyenv versions
pyenv: version `ve.kafkapoc' is not installed (set by /Users/username/REPOS/kafkapoc/.python-version)
  system
  2.7.18
  3.11.1
➜  kafkapoc git:(main) ✗ pyenv virtualenv 3.11.1 ve.kafkapoc

--------

(ve.kafkapoc) ➜  kafkapoc git:(main) ✗ pyenv versions
  system
  2.7.18
  3.11.1
  3.11.1/envs/ve.kafkapoc
* ve.kafkapoc (set by /Users/username/REPOS/kafkapoc/.python-version)

(ve.kafkapoc) ➜  kafkapoc git:(main) ✗

--------

TODO: Continue instructions here on how to upgrade tools and then install Python dependencies.

pip install --upgrade pip

pip install --upgrade setuptools

pip install --upgrade wheel

pip install -r requirements.txt

TODO: Maybe install some newer equivalents of pylint, autopep8, rope, etc/similar

TODO: Maybe make a setup.sh
------------------------------

# TODO: We can write most Python code as a library for this application. If we do that, the following old notes
# are helpful. TODO: Update these instructions. See Pyrithm for examples.

# Install this project's package
# For development, we will install this project's package using the -e option
# so that pip will install it into the venv using symlinks. In this way we can
# make changes to the module which will be picked up upon each new execution
# using the module.
python3 -m pip install -e .

